#include <bits/stdc++.h>
using namespace std;

class ST{
   public:
   vector<int> seg,lazy;
   
   ST(int n){
       seg.resize(4*n,0);
       lazy.resize(4*n,0);
   }
   
   void build(int ind,int low,int high,vector<int> arr){
       if(low==high){
           seg[ind]=arr[low];
           return;
       }
       
       int mid=(low+high)>>1;
       build(2*ind+1,low,mid,arr);
       build(2*ind+2,mid+1,high,arr);
       seg[ind]=seg[2*ind+1]+seg[2*ind+2];
   }
   
   void update(int ind,int low,int high,int l,int r){
       if(lazy[ind]!=0){
           seg[ind]=(high-low+1)-seg[ind];
           if(low!=high){
               lazy[2*ind+1]=1;
               lazy[2*ind+2]=1;
           }
           lazy[ind]=0;
       }
       
       // no overlap
       if(low>r || high<l){
           return;
       }
       
       if(low>=l && high<=r){
               seg[ind]=(high-low+1)-seg[ind];
               if(low!=high){
                   lazy[2*ind+1]=1;
                   lazy[2*ind+2]=1;
               }
           return;
       }
       
       //partial overlap
       int mid=(low+high)>>1;
       update(2*ind+1,low,mid,l,r);
       update(2*ind+2,mid+1,high,l,r);
       seg[ind]=seg[2*ind+1]+seg[2*ind+2];
   }
   
   int query(int ind,int low,int high,int l,int r){
       if(lazy[ind]!=0){
           seg[ind]+=(high-low+1)-seg[ind];
           if(low!=high){
               lazy[2*ind+1]=1;
               lazy[2*ind+2]=1;
           }
           lazy[ind]=0;
       }
       
       if(low>r || high<l){
           return 0;
       }
       
       if(low>=l && high<=r){
          return seg[ind];
       }
       
       int mid=(low+high)>>1;
       int left=query(2*ind+1,low,mid,l,r);
       int right=query(2*ind+2,mid+1,high,l,r);
       return left+right;
   }
};


int main(){
    vector<int> coins = {1,0,0,1,1,0,1,0,1};
    ST segTree = ST(coins.size());
    segTree.build(0,0,coins.size()-1,coins);
    cout<<segTree.query(0,0,coins.size()-1,3,6)<<endl;
    segTree.update(0,0,coins.size()-1,1,7);
    cout<<segTree.query(0,0,coins.size()-1,1,7)<<endl;
    cout<<segTree.seg[0]<<endl;
    
}
